  docker build -t operator-nginx-website:1.0.1 .
    
    
    docker save -o operator1.tar operator-nginx-website:1.0.1
    
    scp ./operator1.tar root@k8s-node2:/root/tongysh
    
    docker load -i operator1.tar





  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: operator-nginx-deployment
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: operator-nginx
    template:
      metadata:
        labels:
          app: operator-nginx
      spec:
        # 关键配置：指定ServiceAccount
        serviceAccountName: website-operator-sa  # 必须已存在的ServiceAccount
        containers:
          - name: operator-nginx-container
            image: operator-nginx-website:1.0.1
            ports:
              - containerPort: 8080
  ---
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: website-operator-sa
  ---
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: website-operator-role
  rules:
    - apiGroups: ["demo.example.com"]  # 必须与CRD的group完全一致
      resources: ["websites"]
      verbs: ["*"]
    - apiGroups: ["apps"]
      resources: ["deployments"]
      verbs: ["*"]
    - apiGroups: [""]
      resources: ["services"]
      verbs: ["*"]
  ---
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: website-operator-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: website-operator-role
  subjects:
    - kind: ServiceAccount
      name: website-operator-sa
      namespace: default  # 改为Operator实际部署的namespace
  ---
  apiVersion: v1
  kind: Secret
  metadata:
    name: website-operator-sa
    annotations:
      kubernetes.io/service-account.name: website-operator-sa  # 替换为你的SA名称
  type: kubernetes.io/service-account-token






  apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-all
  spec:
    serviceAccountName: website-operator-sa
    containers:
      - name: nginx-all
        image: bitnami/nginx
